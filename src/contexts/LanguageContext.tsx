import React, { createContext, useContext, useState, useEffect } from 'react';

// Define language type
export type Language = 'en' | 'hi';

// Define translation structure
export interface Translations {
  // Common
  common: {
    farmgaze: string;
    home: string;
    about: string;
    contact: string;
    services: string;
    products: string;
    maps: string;
    weather: string;
    information: string;
    chatbot: string;
    aiRecommendation: string;
  };
  
  // Home page
  home: {
    title: string;
    subtitle: string;
    description: string;
    getStarted: string;
    learnMore: string;
    keyFeatures: string;
    keyFeaturesDesc: string;
    features: {
      smartIrrigation: {
        title: string;
        description: string;
      };
      dataAnalytics: {
        title: string;
        description: string;
      };
      weatherMonitoring: {
        title: string;
        description: string;
      };
      cropHealth: {
        title: string;
        description: string;
      };
      fieldMapping: {
        title: string;
        description: string;
      };
      performanceTracking: {
        title: string;
        description: string;
      };
      systemIntegration: {
        title: string;
        description: string;
      };
      dataSecurity: {
        title: string;
        description: string;
      };
    };
  };
  
  // AI Recommendation page
  aiRecommendation: {
    title: string;
    description: string;
    selectLocation: string;
    selectLocationDesc: string;
    state: string;
    district: string;
    season: string;
    seasonAdv: string;
    autoDetect: string;
    getRecommendations: string;
    analyzing: string;
    currentConditions: string;
    currentSeason: string;
    weatherConditions: string;
    precipitation: string;
    recommendedCrops: string;
    seasonSuitability: string;
    whyThisCrop: string;
    currentWeatherFactors: string;
    temperature: string;
    humidity: string;
    rainfallForecast: string;
    proTips: string;
    readyToStart: string;
    readyToStartDesc: string;
    confidence: string;
    match: string;
    high: string;
    medium: string;
    low: string;
  };
}

// English translations
const enTranslations: Translations = {
  common: {
    farmgaze: "FarmGaze",
    home: "Home",
    about: "About",
    contact: "Contact",
    services: "Services",
    products: "Products", 
    maps: "Maps",
    weather: "Weather",
    information: "Information",
    chatbot: "Chatbot",
    aiRecommendation: "AI Recommendation",
  },
  home: {
    title: "Smart Irrigation for Precision Farming",
    subtitle: "FarmGaze",
    description: "Optimize your farming operations with data-driven insights and intelligent irrigation solutions",
    getStarted: "Get Started",
    learnMore: "Learn More",
    keyFeatures: "Key Features",
    keyFeaturesDesc: "Discover how FarmGaze can transform your farming operations with advanced features",
    features: {
      smartIrrigation: {
        title: "Smart Irrigation",
        description: "Automated irrigation systems that optimize water usage based on real-time data"
      },
      dataAnalytics: {
        title: "Data Analytics", 
        description: "Comprehensive data analysis tools to track and improve farm performance"
      },
      weatherMonitoring: {
        title: "Weather Monitoring",
        description: "Real-time weather data integration for better decision making"
      },
      cropHealth: {
        title: "Crop Health",
        description: "Monitor and maintain optimal crop health with advanced tracking"
      },
      fieldMapping: {
        title: "Field Mapping",
        description: "Detailed field mapping and area management tools"
      },
      performanceTracking: {
        title: "Performance Tracking",
        description: "Track and analyze farm performance metrics over time"
      },
      systemIntegration: {
        title: "System Integration",
        description: "Seamless integration with existing farm management systems"
      },
      dataSecurity: {
        title: "Data Security",
        description: "Enterprise-grade security for your farm data"
      }
    }
  },
  aiRecommendation: {
    title: "AI Crop Recommendation",
    description: "Get intelligent district-specific crop suggestions using our enhanced 5-season agricultural system. Our AI analyzes historical cultivation data, real-time weather, and climate patterns across 12,000+ districts in India.",
    selectLocation: "Select Your Location",
    selectLocationDesc: "Choose your state, district, and season (optional) to get personalized crop recommendations",
    state: "State",
    district: "District",
    season: "Season",
    seasonAdv: "Season (Advanced)",
    autoDetect: "ü§ñ Auto-Detect",
    getRecommendations: "Get Recommendations",
    analyzing: "Analyzing...",
    currentConditions: "Current Conditions",
    currentSeason: "Current Season", 
    weatherConditions: "Weather Conditions",
    precipitation: "Precipitation",
    recommendedCrops: "Recommended Crops",
    seasonSuitability: "Season Suitability:",
    whyThisCrop: "Why this crop:",
    currentWeatherFactors: "Current Weather Factors:",
    temperature: "Temperature",
    humidity: "Humidity",
    rainfallForecast: "Rainfall Forecast",
    proTips: "üí° Pro Tips:",
    readyToStart: "Ready to Get Started?",
    readyToStartDesc: "Select your location above to receive AI-powered crop recommendations tailored to your area's unique agricultural conditions.",
    confidence: "confidence",
    match: "match",
    high: "high",
    medium: "medium",
    low: "low",
  }
};

// Hindi translations
const hiTranslations: Translations = {
  common: {
    farmgaze: "‡§´‡§æ‡§∞‡•ç‡§Æ‡§ó‡•á‡§ú‡§º",
    home: "‡§π‡•ã‡§Æ",
    about: "‡§π‡§Æ‡§æ‡§∞‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç",
    contact: "‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç",
    services: "‡§∏‡•á‡§µ‡§æ‡§è‡§Å",
    products: "‡§â‡§§‡•ç‡§™‡§æ‡§¶", 
    maps: "‡§Æ‡§æ‡§®‡§ö‡§ø‡§§‡•ç‡§∞",
    weather: "‡§Æ‡•å‡§∏‡§Æ",
    information: "‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä",
    chatbot: "‡§ö‡•à‡§ü‡§¨‡•â‡§ü",
    aiRecommendation: "‡§è‡§Ü‡§à ‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§æ",
  },
  home: {
    title: "‡§∏‡§ü‡•Ä‡§ï ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à",
    subtitle: "‡§´‡§æ‡§∞‡•ç‡§Æ‡§ó‡•á‡§ú‡§º",
    description: "‡§°‡•á‡§ü‡§æ-‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø ‡§î‡§∞ ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§® ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§™‡§®‡•á ‡§ï‡•É‡§∑‡§ø ‡§ë‡§™‡§∞‡•á‡§∂‡§® ‡§ï‡•ã ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç",
    getStarted: "‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",
    learnMore: "‡§î‡§∞ ‡§ú‡§æ‡§®‡•á‡§Ç",
    keyFeatures: "‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Å",
    keyFeaturesDesc: "‡§â‡§®‡•ç‡§®‡§§ ‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§´‡§æ‡§∞‡•ç‡§Æ‡§ó‡•á‡§ú‡§º ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§™‡§®‡•á ‡§ï‡•É‡§∑‡§ø ‡§ë‡§™‡§∞‡•á‡§∂‡§® ‡§ï‡•ã ‡§ï‡•à‡§∏‡•á ‡§¨‡§¶‡§≤‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à, ‡§á‡§∏‡•á ‡§ñ‡•ã‡§ú‡•á‡§Ç",
    features: {
      smartIrrigation: {
        title: "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à",
        description: "‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§∏‡§Æ‡§Ø ‡§ï‡•á ‡§°‡•á‡§ü‡§æ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§™‡§æ‡§®‡•Ä ‡§ï‡•á ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•ã ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä"
      },
      dataAnalytics: {
        title: "‡§°‡•á‡§ü‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£", 
        description: "‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§ï‡•ã ‡§ü‡•ç‡§∞‡•à‡§ï ‡§î‡§∞ ‡§∏‡•Å‡§ß‡§æ‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§°‡•á‡§ü‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§â‡§™‡§ï‡§∞‡§£"
      },
      weatherMonitoring: {
        title: "‡§Æ‡•å‡§∏‡§Æ ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä",
        description: "‡§¨‡•á‡§π‡§§‡§∞ ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø ‡§≤‡•á‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§∏‡§Æ‡§Ø ‡§ï‡•á ‡§Æ‡•å‡§∏‡§Æ ‡§°‡•á‡§ü‡§æ ‡§è‡§ï‡•Ä‡§ï‡§∞‡§£"
      },
      cropHealth: {
        title: "‡§´‡§∏‡§≤ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø",
        description: "‡§â‡§®‡•ç‡§®‡§§ ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§∏‡§æ‡§• ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§´‡§∏‡§≤ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•Ä ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§î‡§∞ ‡§∞‡§ñ‡§∞‡§ñ‡§æ‡§µ"
      },
      fieldMapping: {
        title: "‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡§æ‡§®‡§ö‡§ø‡§§‡•ç‡§∞‡§£",
        description: "‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡§æ‡§®‡§ö‡§ø‡§§‡•ç‡§∞‡§£ ‡§î‡§∞ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§â‡§™‡§ï‡§∞‡§£"
      },
      performanceTracking: {
        title: "‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó",
        description: "‡§∏‡§Æ‡§Ø ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç‡§ü‡•ç‡§∞‡§ø‡§ï‡•ç‡§∏ ‡§ï‡•ã ‡§ü‡•ç‡§∞‡•à‡§ï ‡§î‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç"
      },
      systemIntegration: {
        title: "‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä ‡§è‡§ï‡•Ä‡§ï‡§∞‡§£",
        description: "‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§ñ‡•á‡§§‡•Ä ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§π‡§ú ‡§è‡§ï‡•Ä‡§ï‡§∞‡§£"
      },
      dataSecurity: {
        title: "‡§°‡•á‡§ü‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ",
        description: "‡§Ü‡§™‡§ï‡•á ‡§ñ‡•á‡§§‡•Ä ‡§°‡•á‡§ü‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§Ç‡§ü‡§∞‡§™‡•ç‡§∞‡§æ‡§á‡§ú‡§º-‡§ó‡•ç‡§∞‡•á‡§° ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ"
      }
    }
  },
  aiRecommendation: {
    title: "‡§è‡§Ü‡§à ‡§´‡§∏‡§≤ ‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§æ",
    description: "‡§π‡§Æ‡§æ‡§∞‡•á ‡§∏‡•Å‡§ß‡§æ‡§∞‡§ø‡§§ 5-‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•É‡§∑‡§ø ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§ú‡§ø‡§≤‡§æ-‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§´‡§∏‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§π‡§Æ‡§æ‡§∞‡§æ ‡§è‡§Ü‡§à 12,000+ ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ú‡§ø‡§≤‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§ê‡§§‡§ø‡§π‡§æ‡§∏‡§ø‡§ï ‡§ñ‡•á‡§§‡•Ä ‡§°‡•á‡§ü‡§æ, ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§∏‡§Æ‡§Ø ‡§ï‡•á ‡§Æ‡•å‡§∏‡§Æ ‡§î‡§∞ ‡§ú‡§≤‡§µ‡§æ‡§Ø‡•Å ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§",
    selectLocation: "‡§Ö‡§™‡§®‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§ö‡•Å‡§®‡•á‡§Ç",
    selectLocationDesc: "‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§´‡§∏‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡§æ ‡§∞‡§æ‡§ú‡•ç‡§Ø, ‡§ú‡§ø‡§≤‡§æ ‡§î‡§∞ ‡§Æ‡•å‡§∏‡§Æ (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï) ‡§ö‡•Å‡§®‡•á‡§Ç",
    state: "‡§∞‡§æ‡§ú‡•ç‡§Ø",
    district: "‡§ú‡§ø‡§≤‡§æ",
    season: "‡§Æ‡•å‡§∏‡§Æ",
    seasonAdv: "‡§Æ‡•å‡§∏‡§Æ (‡§â‡§®‡•ç‡§®‡§§)",
    autoDetect: "ü§ñ ‡§∏‡•ç‡§µ‡§§‡§É ‡§™‡§π‡§ö‡§æ‡§®",
    getRecommendations: "‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§æ‡§è‡§Å ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç",
    analyzing: "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à...",
    currentConditions: "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡§æ‡§Å",
    currentSeason: "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•å‡§∏‡§Æ", 
    weatherConditions: "‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡§æ‡§Å",
    precipitation: "‡§µ‡§∞‡•ç‡§∑‡§æ",
    recommendedCrops: "‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§´‡§∏‡§≤‡•á‡§Ç",
    seasonSuitability: "‡§Æ‡•å‡§∏‡§Æ ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§§‡§æ:",
    whyThisCrop: "‡§Ø‡§π ‡§´‡§∏‡§≤ ‡§ï‡•ç‡§Ø‡•ã‡§Ç:",
    currentWeatherFactors: "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡§æ‡§∞‡§ï:",
    temperature: "‡§§‡§æ‡§™‡§Æ‡§æ‡§®",
    humidity: "‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ",
    rainfallForecast: "‡§µ‡§∞‡•ç‡§∑‡§æ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®",
    proTips: "üí° ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§Ø‡•Å‡§ï‡•ç‡§§‡§ø‡§Ø‡§æ‡§Å:",
    readyToStart: "‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡§Ç?",
    readyToStartDesc: "‡§Ö‡§™‡§®‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§ï‡•Ä ‡§Ö‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤ ‡§è‡§Ü‡§à-‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§´‡§∏‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ä‡§™‡§∞ ‡§Ö‡§™‡§®‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§ö‡•Å‡§®‡•á‡§Ç‡•§",
    confidence: "‡§Ü‡§§‡•ç‡§Æ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏",
    match: "‡§Æ‡•á‡§≤",
    high: "‡§â‡§ö‡•ç‡§ö",
    medium: "‡§Æ‡§ß‡•ç‡§Ø‡§Æ",
    low: "‡§ï‡§Æ",
  }
};

export const LanguageContext = createContext<{
  language: Language;
  setLanguage: (language: Language) => void;
  t: Translations;
}>({
  language: 'en',
  setLanguage: () => {},
  t: enTranslations,
});

export const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [language, setLanguage] = useState<Language>('en');

  useEffect(() => {
    const savedLanguage = localStorage.getItem('language') as Language | null;
    if (savedLanguage) {
      setLanguage(savedLanguage);
    }
  }, []);

  const t = language === 'en' ? enTranslations : hiTranslations;

  const handleSetLanguage = (newLanguage: Language) => {
    setLanguage(newLanguage);
    localStorage.setItem('language', newLanguage);
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage: handleSetLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};